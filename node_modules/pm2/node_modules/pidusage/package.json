{
  "name": "pidusage",
  "version": "0.0.4",
  "description": "Process cpu % and memory use of a PID",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2"
  },
  "scripts": {
    "test": "mocha test/test.js --reporter min"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/soyuka/pidusage"
  },
  "keywords": [
    "pid",
    "usage",
    "ps",
    "cpu",
    "memory",
    "proc"
  ],
  "author": {
    "name": "soyuka"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/soyuka/pidusage/issues"
  },
  "homepage": "https://github.com/soyuka/pidusage",
  "readme": "pidusage\n========\n\nProcess cpu % and memory use of a PID\n\nIdeas from https://github.com/arunoda/node-usage/ but with no C-bindings\n\n# API\n\n```\nvar pusage = require('pidusage')\n\npusage(process.pid, function(err, stat) {\n\n\texpect(err).to.be.null\n\texpect(stat).to.be.an('object')\n\texpect(stat).to.have.property('cpu')\n\texpect(stat).to.have.property('memory')\n\n\tconsole.log('Pcpu: %s', stat.cpu)\n\tconsole.log('Mem: %s', stat.memory) //those are bytes\n\n})\n\n```\n\n# What do this script do?\n\nA check on the `os.platform` is done to determine the method to use.\n\n### Linux\nWe use `/proc/{pid}/stat` in addition to the the `PAGE_SIZE` and the `CLK_TCK` direclty from `getconf()` command. Uptime comes from `proc/uptime` file because it's more accurate than the nodejs `os.uptime()`.\n\n### On darwin, freebsd, solaris (tested on 10/11)\nWe use a fallback with the `ps -o pcpu,rss -p PID` command to get the same informations.\n\n### Windows\nWindows is really tricky, atm it uses the `wmic.exe`, feel free to share ideas on how to improve this.\n\n# Licence\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "pidusage@0.0.4",
  "dist": {
    "shasum": "aef25853d277d2edf64e868165a3725221ffc2ed"
  },
  "_from": "pidusage@0.0.4",
  "_resolved": "https://registry.npmjs.org/pidusage/-/pidusage-0.0.4.tgz"
}
